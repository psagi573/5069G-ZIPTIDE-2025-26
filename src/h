

PID::PID(double p, double i, double d, double cap)
{
    kP = p;
    kI = i;
    kD = d;
    outputCap = cap; // Expected to be in volts, e.g., 12.0
    integral = 0;
    prevError = 0;
}

void PID::reset()
{
    integral = 0;
    prevError = 0;
}

double PID::compute(double target, double current)
{
    double error = target - current;
    integral += error;

    // Optional: cap the integral to prevent windup
    if (integral > outputCap)
        integral = outputCap;
    if (integral < -outputCap)
        integral = -outputCap;

    double derivative = error - prevError;
    prevError = error;

    double output = (error * kP) + (integral * kI) + (derivative * kD);

    // Clamp output manually (in volts)
    if (output > outputCap)
        output = outputCap;
    if (output < -outputCap)
        output = -outputCap;

    return output;
}
